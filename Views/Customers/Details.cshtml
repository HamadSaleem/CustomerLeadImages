
@model dynamic
@{
    Layout = "_Layout";
    var ownerType = (string)ViewBag.OwnerType;
    var ownerId = ownerType == "customer" ? ((CustomerLeadImages.Models.Customer)Model).Id : ((CustomerLeadImages.Models.Lead)Model).Id;
    var title = ownerType == "customer" ? "Customer" : "Lead";
    ViewData["Title"] = title + " Details";
}
<div class="d-flex align-items-center justify-content-between mb-3">
    <h2 class="m-0">@title @ownerId</h2>
    <div id="slotInfo" class="text-muted"></div>
</div>
<div class="card shadow-sm mb-3">
  <div class="card-body">
    <div class="mb-2">Upload up to 10 images</div>
    <input type="file" id="files" multiple accept="image/*" class="form-control mb-2" />
    <button id="btnUpload" class="btn btn-primary">Upload</button>
  </div>
</div>
<div id="gallery" class="row g-3"></div>
@section Scripts{
<script>
const ownerType = "@ownerType";
const ownerId = @ownerId;
const maxImages = 10;
function b64FromFile(file){
  return new Promise((res, rej)=>{
    const r = new FileReader();
    r.onload = ()=>{
      const s = r.result;
      const comma = s.indexOf(',');
      const payload = comma>0 ? s.substring(comma+1) : s;
      res(payload);
    };
    r.onerror = ()=>rej("read error");
    r.readAsDataURL(file);
  });
}
async function refresh(){
  const r = await fetch(`/api/profile-images/${ownerType}/${ownerId}`);
  const data = await r.json();
  const remain = maxImages - data.length;
  $("#slotInfo").text(`${data.length}/10 used`);
  const cont = $("#gallery");
  cont.empty();
  data.forEach(x=>{
    const card = $(`<div class="col-6 col-md-4 col-lg-3">
      <div class="card h-100 shadow-sm">
        <img class="card-img-top" src="data:${x.mimeType};base64,${x.base64Data}" />
        <div class="card-body p-2 d-flex justify-content-between align-items-center">
          <small class="text-muted">${new Date(x.createdOn).toLocaleString()}</small>
          <button class="btn btn-sm btn-outline-danger" data-id="${x.id}">Delete</button>
        </div>
      </div>
    </div>`);
    cont.append(card);
  });
  cont.find("button").on("click", async function(){
    const id = $(this).data("id");
    const ask = await Swal.fire({title:"Delete image?", icon:"warning", showCancelButton:true, confirmButtonText:"Delete"});
    if (!ask.isConfirmed) return;
    const del = await fetch(`/api/profile-images/${id}`, { method:"DELETE" });
    if (del.status === 204) { await refresh(); } else { Swal.fire("Error","Unable to delete","error"); }
  });
  $("#btnUpload").prop("disabled", remain<=0);
}
$("#btnUpload").on("click", async function(){
  const files = $("#files")[0].files;
  if (!files || files.length===0) { Swal.fire("No file","Select image files","info"); return; }
  const list = [];
  for (let i=0;i<files.length;i++){
    const f = files[i];
    const b = await b64FromFile(f);
    list.push(b);
  }
  const body = JSON.stringify({ base64Images: list });
  const res = await fetch(`/api/profile-images/${ownerType}/${ownerId}`, { method:"POST", headers:{ "Content-Type":"application/json" }, body });
  if (res.status===201 || res.status===207){ Swal.fire("Done","Upload complete","success"); $("#files").val(""); await refresh(); }
  else if (res.status===409){ const t = await res.text(); Swal.fire("Limit", t, "warning"); }
  else { const t = await res.text(); Swal.fire("Error", t || "Upload failed", "error"); }
});
refresh();
</script>
}
